.box {    
    //중첩(Nesting) : 부모 { 자식 {   } }
    p { font-size:77px; color:yellow; }

    //속성 중첩(Nesting)
    background : {
        color:pink;
        image: url(../images/pattern.gif);
        repeat:no-repeat;
        size:33px auto;
        position:right top;
    }

    //&(엠퍼샌드) : 상위(부모)선택자 - 여기에서는 .box가 해당됨
    & { border:5px dashed hotpink; }
    &:hover { background-color:aquamarine; }

    //@at-root (중첩에서 벗어남)
    @at-root .nemo1 { text-decoration:line-through; }
}

.nemo {
    //&(엠퍼샌드)
    &1 { color:#0cc; }
    &2 { color:#fc0; }
    &3 { color:#777; }
}


//$변수:값;
$m1:50px;

.nemo3 { font-size:$m1; }

//연산자(같은 단위끼리만 계산됨 - 다른단위는 calc함수 사용)
.nemo2 { font-size:(150%+150%)/3; }


//%플레이스홀더(placeholder)
%rect {
    width:77px; height:77px;
    border:10px solid #fc0;
}

//익스텐드(Extend)
.r1 { @extend %rect; }
.r2 { @extend %rect; }
.r3 { @extend %rect; }
.r4 { @extend %rect; }

.yellowCircle {
    border-radius:50%;
    background-color:yellow;
}
.r1 { @extend .yellowCircle; }
.r2 { @extend .yellowCircle; }



//Mixin
@mixin centerXY {
    display:flex;
    justify-content:center;
    align-items:center;
}

.r3 { @include centerXY; }

//Argument(매개변수,인수)
@mixin alignXY($a,$b) {
    display:flex;
    justify-content:$a;
    align-items:$b;
}

.r4 { @include alignXY(right,top); }


//반복문
@for $i from 1 through 4 {
    .r#{$i} { margin-left:#{$i*10}px; }
    //#{}를 이용해서 코드의 어디든지 
    //변수 값을 넣을 수 있다.
}


//조건문
$a:7;

.z {
    @if ($a > 5){
        background-color:aquamarine;
        width:100px;
    } @else {
        background-color:beige;
        wdith:200px;
    }
}


//함수
@function kColor($k){

    @if ($k == 0){
      @return yellow;
    } 
    @else if ($k == 1) {
        @return hotpink;
    } 
    @else {
        @return #0cc;
    }
    
}


.k1{ background-color:kColor(0); }
.k2{ background-color:kColor(1); }
.k3{ background-color:kColor(2); }





